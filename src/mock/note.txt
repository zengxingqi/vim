io.on('connect', onConnect)

function onConnect(socket){

  // 发送给当前客户端
  socket.emit('hello', 'can you hear me?', 1, 2, 'abc')

  // 发送给所有客户端，除了发送者
  socket.broadcast.emit('broadcast', 'hello friends!')

  // 发送给同在 'game' 房间的所有客户端，除了发送者
  socket.to('game').emit('nice game', "let's play a game")

  // 发送给同在 'game1' 或 'game2' 房间的所有客户端，除了发送者
  socket.to('game1').to('game2').emit('nice game', "let's play a game (too)")

  // 发送给同在 'game' 房间的所有客户端，包括发送者
  io.in('game').emit('big-announcement', 'the game will start soon')

  // 发送给同在 'myNamespace' 命名空间下的所有客户端，包括发送者
  io.of('myNamespace').emit('bigger-announcement', 'the tournament will start soon')

  // 发送给指定 socketid 的客户端（私密消息）
  socket.to(<socketid>).emit('hey', 'I just met you')

  // 包含回执的消息
  socket.emit('question', 'do you think so?', function (answer) {})

  // 不压缩，直接发送
  socket.compress(false).emit('uncompressed', "that's rough")

  // 如果客户端还不能接收消息，那么消息可能丢失
  socket.volatile.emit('maybe', 'do you really need it?')

  // 发送给当前 node 实例下的所有客户端（在使用多个 node 实例的情况下）
  io.local.emit('hi', 'my lovely babies')

}

// Object.keys({uname: 'uname', pass: 'abc123'}).length

// 注册
// 校验json是否仅有5个键
{
  uname: 'uname',               // 用户名，校验数据库是否重名
  pass: 'abc123',                // 密码，加密传输和数据库加密存储
  contact: 'me@zengxingqi.com',  // 联系方式，邮箱/手机，用于找回修改密码/密钥等
  sex: '男',                     // 性别
  city: '中国广东深圳',            // 国家省份城市
  uid: 'usr',                    // 用户唯一标识，后端自动生成
  ctime: '20180704',             // 注册时间，后端自动生成
}

// 查询数据库是否已存在某一个用户名
// 校验json是否仅有1个键
{
  uname: 'uname'
}

// 登陆
// 校验json是否仅有4个键
{
  uname: 'uname',    // 用户名，查询数据库是否存在该用户
  pass: 'abc123',     // 密码，加密传输和加密校验
  uid: 'usr',         // 用户唯一标识，后端返回
  ltime: '20180705',  // 登陆时间，后端记录，如果用户长时间未登录过，则走激活流程或删除该用户
}


// socket 通道连接
c：客户端 === s：服务端
{
  tid: 'bs',     // 终端唯一标识，bs：浏览器，默认（以后考虑新增app端）
  uid: 'usr',    // 用户唯一标识，如果在线有重复，则踢下线；注册的时候，是mongodb生成的唯一索引id
  sid: '123'    // 当前唯一标识，由s下发c绑定，校验是否一致；如果c刷新断开，s重新下发c绑定
}

// 连接mongodb错误
name: 'MongoNetworkError',
message: 'failed to connect to server [localhost:27017] on first connect [MongoNetworkError: connect ECONNREFUSED 127.0.0.1:27017]',
errorLabels: [ 'TransientTransactionError' ]

// 更新doc
Tank.update({ _id: id }, { $set: { size: 'large' }}, callback);
Tank.findById(id, function (err, tank) {
  if (err) return handleError(err);
  tank.set({ size: 'large' });
  tank.save(function (err, updatedTank) {
    if (err) return handleError(err);
    res.send(updatedTank);
  });
});

// 查询doc
Tank.find({ size: 'small' }).where('createdDate').gt(oneYearAgo).exec(callback);
Person.
  find({ occupation: /host/ }).
  where('name.last').equals('Ghost').
  where('age').gt(17).lt(66).
  where('likes').in(['vaporizing', 'talking']).
  limit(10).
  sort('-occupation').
  select('name occupation').
  exec(callback);
// 查询每个 last name 是 'Ghost' 的 person， select `name` 和 `occupation` 字段
Person.findOne({ 'name.last': 'Ghost' }, 'name occupation', function (err, person) {
  if (err) return handleError(err);
  // Prints "Space Ghost is a talk show host".
  console.log('%s %s is a %s.', person.name.first, person.name.last,
    person.occupation);
});

// 创建保存doc
small.save(function (err) {
  if (err) return handleError(err);
  // saved!
})
// or
Tank.create({ size: 'small' }, function (err, small) {
  if (err) return handleError(err);
  // saved!
})

// 移除doc
Tank.remove({ size: 'large' }, function (err) {
  if (err) return handleError(err);
  // removed!
});




